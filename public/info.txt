
#######################################################################################
INTRO TO WEB AUDIO RECORDER
###################################################################################
WebAudioRecorder.js is a JavaScript library written in 2015 by higuma that can record 
audio and encode to common formats directly in the browser.

When used in conjunction with getUserMedia() it can record the audio from the user’s 
microphone or webcam.

It supports 3 encoding formats:

Uncompressed waveform audio (.wav)
Vorbis audio in ogg container (.ogg)
MP3 (MPEG-1 Audio Layer III) (.mp3)

#######################################################################################
LIBRARIES FOR ENCODING AUDIO
#######################################################################################
WebAudioRecorder.js uses external JavaScript libraries to convert the raw audio to mp3 and 
Vorbis. These libraries are Java Script versions of the popular LAME mp3 encoder and 
libogg/libvorbis encoders obtained by compiling the original C code using Empscripten as 
(the asm.js subset of) JavaScript. Since JavaScript is slower than native code you should 
expect your encoding times to be higher.

These libraries are loaded and used as Web Workers which prevents the browser tab from 
becoming unresponsive while the audio encoding is underway.

Even though the main WebAudioRecorder.min.js JS file comes in at just 3.6KB when minified 
(and 1.21 KB when gzipped) unless you’re recording to wav, you do have to make extra HTTP 
requests and load the external libraries, and these libraries are quite big:


#######################################################################################
For encoding MP3
#######################################################################################
WebAudioRecorderMp3.min.js 386 KB minified and 114 KB gzipped
Mp3LameEncoder.min.js.mem 96 KB minified and 12 KB gzipped
That’s 2 HTTP requests and 126KB in total when gzipped.

The MP3 encoder is locked at recording 2 channels but you can configure the bitrate
 from 64 to 320. The current implementation supports LAME CBR encoding only, no VBR 
 (variable bit rate).

#######################################################################################
For encoding Vorbis in ogg container
#######################################################################################

WebAudioRecorderOgg.min.js 311 KB minified and 95 KB gzipped
OggVorbisEncoder.min.js.mem 553 KB minified and 114KB gzipped
That’s 2 HTTP requests and 209KB in total when gzipped.

The Vorbis encoder can encode mono or stereo sound and you can configure the bitrate 
from 45kb/s to 500kb/s. Also, keep in mind that Vorbis is mostly aimed at compressing 
music and audio in general, it’s not aimed at compressing speech like the way Speex is.

#######################################################################################
Uncompressed wav sound
#######################################################################################
The small code for capturing data as uncompressed wav is located separately in
 WebAudioRecorderWav.min.js which comes in at just 2.6 KB minified and 1 KB gzipped. 
 No need for large libraries here.

When recording to wav, audio data is recorded as 2 channel 16bit audio (CD quality) 
and thus will be exactly 10.582MB/minute at 44.1kHz but you can lower the number of 
channels from the WebAudioRecorder constructor to halve that size.

#######################################################################################
Sampling rate
#######################################################################################
Regardless of the library, the sample rate used will be the one set in your OS for 
your playback device (as per the spec). In practice, you’ll mostly see sample rates 
of 44100 (44.1kHz) and 48000 (48kHz).